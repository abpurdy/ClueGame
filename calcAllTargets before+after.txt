Before:

private Set<BoardCell> calcAllTargets(BoardCell startCell, int pathLength, Set<BoardCell> visited, Set<BoardCell> options){

		pathLength--;
		visited.add(startCell);

		if(pathLength == 0) {
			for (BoardCell adjacent:adjMatrix.get(startCell)) {
				if(!visited.contains(adjacent)) {
					options.add(adjacent);
				}
			}
		}
		else {
			for (BoardCell adjacent:adjMatrix.get(startCell)) {
				if(adjacent.isDoorway()) {
					options.add(adjacent);
				}
				else if(!visited.contains(adjacent)) {
					Set<BoardCell> Value = new HashSet<BoardCell>();
					Value.addAll(visited);
					options.addAll(calcAllTargets(adjacent, pathLength, Value, options));
				}
			}
		}
		return options;
	}



After:

private void calcAllTargets(BoardCell startCell, int pathLength, Set<BoardCell> visited){
		
		//check each adjacent cell
		for(BoardCell adjacent : adjMatrix.get(startCell)) {
			
			//if cell is not visited
			if(!visited.contains(adjacent)) {
				
				visited.add(adjacent); //add cell to visited list
				
				//add cell if it is a doorway
				if(adjacent.isDoorway())
					targets.add(adjacent);
				
				//add cell to targets if no moves remain, otherwise go to that cell and check its adjacent cells
				if(pathLength == 1)
					targets.add(adjacent);
				else
					calcAllTargets(adjacent, pathLength-1, visited);
				
				visited.remove(adjacent); //remove cell from visited list
				
			}
			
		}
		
	}
